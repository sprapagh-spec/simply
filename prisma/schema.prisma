generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Household {
  id           String   @id @default(cuid())
  name         String?
  emailDomain  String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  region       String?
  postalCode   String?
  country      String?
  guests       Guest[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Guest {
  id               String      @id @default(cuid())
  email            String?     @unique
  firstName        String
  lastName         String
  householdId      String?
  household        Household?  @relation(fields: [householdId], references: [id])
  tags             GuestTag[]
  status           String      @default("invited") // invited, responded, bounced, unsubscribed
  consentSource    String      @default("implied")
  consentTimestamp DateTime?
  auditLogs        AuditLog[]
  gifts            Gift[]
  emails           Email[]
  portalToken      String?     @unique
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Tag {
  id    String     @id @default(cuid())
  name  String     @unique
  guests GuestTag[]
}

model GuestTag {
  guestId String
  tagId   String
  guest   Guest @relation(fields: [guestId], references: [id])
  tag     Tag   @relation(fields: [tagId], references: [id])
  @@id([guestId, tagId])
}

model Campaign {
  id        String       @id @default(cuid())
  name      String
  subject   String
  template  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  emails    Email[]
}

model Email {
  id           String      @id @default(cuid())
  campaignId   String
  guestId      String
  toAddress    String
  subject      String
  bodyHtml     String
  magicToken   String      @unique
  sentAt       DateTime?
  status       String      @default("pending") // pending, sent, bounced, opened, clicked, unsubscribed
  campaign     Campaign    @relation(fields: [campaignId], references: [id])
  guest        Guest       @relation(fields: [guestId], references: [id])
  events       EmailEvent[]
}

model EmailEvent {
  id        String   @id @default(cuid())
  emailId   String
  type      String   // sent, open, click, bounce, unsubscribe
  timestamp DateTime @default(now())
  email     Email    @relation(fields: [emailId], references: [id])
}

model Gift {
  id             String   @id @default(cuid())
  guestId        String
  amountGrossCents Int
  platformFeeCents Int
  processingFeeCents Int
  amountNetCents  Int
  currency       String   @default("CAD")
  stripePaymentIntentId String?
  status         String   @default("succeeded") // succeeded, refunded, pending
  source         String   @default("stripe") // stripe, manual
  note           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  guest          Guest    @relation(fields: [guestId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  guestId   String?
  action    String
  details   String?
  createdAt DateTime @default(now())
  guest     Guest?   @relation(fields: [guestId], references: [id])
}

// NextAuth tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

